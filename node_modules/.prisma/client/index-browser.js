
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.2.0
 * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
 */
Prisma.prismaVersion = {
  client: "5.2.0",
  engine: "2804dc98259d2ea960602aca6b8e7fdc03c1758f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  userID: 'userID',
  email: 'email',
  password: 'password',
  role: 'role',
  verified: 'verified',
  creatdAt: 'creatdAt',
  updateAt: 'updateAt'
};

exports.Prisma.OtpScalarFieldEnum = {
  otpID: 'otpID',
  otp: 'otp',
  expiredAt: 'expiredAt',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  notificationID: 'notificationID',
  title: 'title',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServicesScalarFieldEnum = {
  serviceID: 'serviceID',
  service: 'service',
  description: 'description',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  appointmentID: 'appointmentID',
  date: 'date',
  time: 'time',
  platform: 'platform',
  link: 'link',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentScalarFieldEnum = {
  equipmentID: 'equipmentID',
  name: 'name',
  description: 'description',
  category: 'category',
  quantity: 'quantity',
  expireDate: 'expireDate',
  creatdAt: 'creatdAt',
  updateAt: 'updateAt'
};

exports.Prisma.BlogsScalarFieldEnum = {
  blogsID: 'blogsID',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  draft: 'draft'
};

exports.Prisma.FaqsScalarFieldEnum = {
  faqsID: 'faqsID',
  faqs: 'faqs',
  answer: 'answer',
  creatdAt: 'creatdAt',
  updateAt: 'updateAt'
};

exports.Prisma.AvatarScalarFieldEnum = {
  avatarID: 'avatarID',
  avatar: 'avatar',
  creatdAt: 'creatdAt',
  updateAt: 'updateAt',
  profileID: 'profileID'
};

exports.Prisma.ProfileScalarFieldEnum = {
  profileID: 'profileID',
  firstname: 'firstname',
  lastname: 'lastname',
  phone: 'phone',
  designation: 'designation',
  expertise: 'expertise',
  emergencyPhone: 'emergencyPhone',
  userID: 'userID'
};

exports.Prisma.PresciptionScalarFieldEnum = {
  prescriptionID: 'prescriptionID',
  prescription: 'prescription',
  dose: 'dose',
  amount: 'amount',
  advice: 'advice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userID: 'userID'
};

exports.Prisma.FormScalarFieldEnum = {
  formID: 'formID',
  question: 'question',
  answer: 'answer',
  creatdAt: 'creatdAt',
  updateAt: 'updateAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  feedbackID: 'feedbackID',
  feedback: 'feedback',
  creatdAt: 'creatdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.roles = exports.$Enums.roles = {
  patient: 'patient',
  admin: 'admin',
  staff: 'staff'
};

exports.notifStatus = exports.$Enums.notifStatus = {
  read: 'read',
  unread: 'unread'
};

exports.platform = exports.$Enums.platform = {
  online: 'online',
  f2f: 'f2f'
};

exports.status = exports.$Enums.status = {
  upcoming: 'upcoming',
  done: 'done',
  finished: 'finished'
};

exports.Prisma.ModelName = {
  user: 'user',
  otp: 'otp',
  notification: 'notification',
  services: 'services',
  appointment: 'appointment',
  equipment: 'equipment',
  blogs: 'blogs',
  faqs: 'faqs',
  avatar: 'avatar',
  profile: 'profile',
  presciption: 'presciption',
  form: 'form',
  feedback: 'feedback'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
