// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  url               = env("DATABASE_URL")
}

enum roles {
  patient
  admin
  staff
}

enum status {
  upcoming
  done
  finished
  canceled
}

enum platform {
  online
  f2f
}

enum notifStatus {
  read
  unread
}

enum inventory {
  equipment
  supplies
}

model user {
  userID        String        @id @default(cuid())
  email         String        @unique
  password      String
  role          roles
  verified      Boolean       @default(false)
  creatdAt      DateTime      @default(now()) @db.Timestamp()
  updateAt      DateTime      @default(now()) @db.Timestamp()
  profile       profile?
  blog          blogs[]
  faqs          faqs[]
  equipment     equipment[]
  prescription  presciption[]
  feedback      feedback[]
  appointment   appointment[]
  diagnosis     diagnosis[]
  otp           otp[]
  services      services[]
  preDiagnostic prediag[]
}

model services {
  servicesID   String        @id @default(cuid())
  services     String
  descriptions String
  image        String
  price        Float
  user         user?         @relation(fields: [userID], references: [userID])
  userID       String?
  appointment  appointment[]
}

model otp {
  otpID     String   @id @default(cuid())
  otp       String   @unique
  expiredAt DateTime @db.Timestamp()
  createdAt DateTime @db.Timestamp()
  user      user[]
}

model appointment {
  appointmentID String     @id @default(cuid())
  date          DateTime   @db.Date
  time          String
  services      String?
  platform      platform
  link          String?
  amount        Int
  status        status     @default(upcoming)
  createdAt     DateTime   @default(now()) @db.Timestamp()
  updatedAt     DateTime   @default(now()) @db.Timestamp()
  user          user[]
  feedback      feedback?  @relation(fields: [feedbackID], references: [feedbackID])
  feedbackID    String?
  service       services[]
}

model equipment {
  equipmentID String    @id @default(cuid())
  name        String
  inventory   inventory
  description String
  quantity    Int
  expireDate  DateTime  @db.Date
  creatdAt    DateTime  @default(now()) @db.Timestamp()
  updateAt    DateTime  @default(now()) @db.Timestamp()
  user        user[]
}

model blogs {
  blogsID   String   @id @default(cuid())
  title     String
  content   String
  expertise String
  image     String
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()
  user      user[]
}

model faqs {
  faqsID   String   @id @default(cuid())
  faqs     String
  answer   String
  creatdAt DateTime @default(now()) @db.Timestamp()
  updateAt DateTime @default(now()) @db.Timestamp()
  user     user[]
}

model avatar {
  avatarID  String   @id @default(cuid())
  avatar    String
  creatdAt  DateTime @default(now()) @db.Timestamp()
  updateAt  DateTime @default(now()) @db.Timestamp()
  profile   profile? @relation(fields: [profileID], references: [profileID])
  profileID String?  @unique
}

model profile {
  profileID      String  @id @default(cuid())
  firstname      String
  lastname       String
  phone          String
  designation    String?
  expertise      String?
  emergencyPhone String?
  avatar         avatar?
  user           user?   @relation(fields: [userID], references: [userID])
  userID         String? @unique
}

model diagnosis {
  diagnosisID String   @id @default(cuid())
  diagnosis   String   @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamp()
  updatedAt   DateTime @default(now()) @db.Timestamp()
  user        user?    @relation(fields: [userID], references: [userID])
  userID      String?
}

model presciption {
  prescriptionID String   @id @default(cuid())
  prescription   String
  createdAt      DateTime @default(now()) @db.Timestamp()
  updatedAt      DateTime @default(now()) @db.Timestamp()
  patinet        user?    @relation(fields: [userID], references: [userID])
  userID         String?
}

model feedback {
  feedbackID    String        @id @default(cuid())
  therapistName String
  date          String
  time          String
  question1     String
  question2     String
  question3     String
  question4     String
  question5     String
  question6     String
  question7     String
  question8     String
  feedback      String
  rating        Int
  creatdAt      DateTime      @default(now()) @db.Timestamp()
  updatedAt     DateTime      @default(now()) @db.Timestamp()
  appointment   appointment[]
  user          user[]
}

model prediag {
  prediagnosticID String   @id @default(cuid())
  age             String
  sex             String
  date            String
  time            String
  question1       String
  question2       String
  question3       String
  question4       String
  question5       String
  question6       String
  question7       String
  question8       String
  question9       String
  question10      String
  question11      String
  question12      String
  question13      String
  question14      String
  question15      String
  question16      String
  question17      String
  createdAt       DateTime @default(now()) @db.Timestamp()
  updatedAt       DateTime @default(now()) @db.Timestamp()
  user            user?    @relation(fields: [userID], references: [userID])
  userID          String?
}
