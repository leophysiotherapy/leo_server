/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
     */
    email<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "EmailAddress";
    /**
     * A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
     */
    phone<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "PhoneNumber";
    /**
     * A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    time<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Time";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "URL";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
     */
    email<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "EmailAddress";
    /**
     * A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
     */
    phone<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "PhoneNumber";
    /**
     * A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    time<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Time";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "URL";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  appointmentInput: { // input type
    date?: NexusGenScalars['Date'] | null; // Date
    time?: NexusGenScalars['Time'] | null; // Time
  }
  blogInput: { // input type
    content?: string | null; // String
    title?: string | null; // String
  }
  equipmentInput: { // input type
    category?: string | null; // String
    description?: string | null; // String
    expireDate?: NexusGenScalars['Date'] | null; // Date
    name?: string | null; // String
    quantity?: number | null; // Int
  }
  faqsInput: { // input type
    answer?: string | null; // String
    faqs?: string | null; // String
  }
  prescriptionInput: { // input type
    advice?: string | null; // String
    amount?: number | null; // Int
    dose?: number | null; // Int
    prescription?: string | null; // String
  }
  serviceInput: { // input type
    description?: string | null; // String
    price?: number | null; // Float
    service?: string | null; // String
  }
  userInput: { // input type
    designation?: string | null; // String
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    emergencyPhone?: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    expertise?: string | null; // String
    firstname?: string | null; // String
    lastname?: string | null; // String
    password?: string | null; // String
    phone?: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
  }
}

export interface NexusGenEnums {
  platform: "f2f" | "online"
  roles: "admin" | "patient" | "staff"
  sortType: "asc" | "desc"
  status: "done" | "finished" | "upcoming"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
  EmailAddress: any
  PhoneNumber: any
  Time: any
  URL: any
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  appointment: { // root type
    appointmentID?: string | null; // ID
    date?: NexusGenScalars['Date'] | null; // Date
    link?: string | null; // String
    platform?: string | null; // String
    status?: string | null; // String
    time?: NexusGenScalars['Time'] | null; // Time
  }
  avatar: { // root type
    avatar?: string | null; // String
    avatarID?: string | null; // ID
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  blog: { // root type
    blogsID?: string | null; // ID
    content?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    draft?: boolean | null; // Boolean
    title?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  equipment: { // root type
    category?: string | null; // String
    description?: string | null; // String
    equipmentID?: string | null; // ID
    expiredDate?: NexusGenScalars['DateTime'] | null; // DateTime
    name?: string | null; // String
    quantity?: number | null; // Int
  }
  faqs: { // root type
    answer?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    faqs?: string | null; // String
    faqsID?: string | null; // ID
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  feedback: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    feedback?: string | null; // String
    feedbackID?: string | null; // ID
  }
  notification: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    notificationID?: string | null; // ID
    status?: string | null; // String
    title?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  prescription: { // root type
    advice?: string | null; // String
    amount?: number | null; // Int
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    dose?: number | null; // Int
    precription?: string | null; // String
    prescriptionID?: string | null; // ID
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  profile: { // root type
    designation?: string | null; // String
    emergencyPhone?: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    expertise?: string | null; // String
    firstname?: string | null; // String
    lastname?: string | null; // String
    phone?: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    profileID?: string | null; // ID
  }
  service: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    price?: number | null; // Float
    service?: string | null; // String
    serviceID?: string | null; // ID
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  token: { // root type
    token?: string | null; // String
  }
  user: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    password?: string | null; // String
    role?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userID?: string | null; // ID
    verified?: boolean | null; // Boolean
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createAdminAccount: NexusGenRootTypes['user'] | null; // user
    createAppointment: NexusGenRootTypes['appointment'] | null; // appointment
    createBlogPost: NexusGenRootTypes['blog'] | null; // blog
    createEquipment: NexusGenRootTypes['equipment'] | null; // equipment
    createFAQs: NexusGenRootTypes['faqs'] | null; // faqs
    createMyFeedback: NexusGenRootTypes['feedback'] | null; // feedback
    createPatientAccount: NexusGenRootTypes['user'] | null; // user
    createProfileAvatar: NexusGenRootTypes['avatar'] | null; // avatar
    createService: NexusGenRootTypes['service'] | null; // service
    deleteAppointment: NexusGenRootTypes['appointment'] | null; // appointment
    deleteBlogPost: NexusGenRootTypes['blog'] | null; // blog
    deleteEquipment: NexusGenRootTypes['equipment'] | null; // equipment
    deleteFAQs: NexusGenRootTypes['faqs'] | null; // faqs
    deleteUserAcc: NexusGenRootTypes['user'] | null; // user
    login: NexusGenRootTypes['token'] | null; // token
    resetUserPassword: NexusGenRootTypes['user'] | null; // user
    udpateEquipment: NexusGenRootTypes['equipment'] | null; // equipment
    updateAppointment: NexusGenRootTypes['appointment'] | null; // appointment
    updateBlogDraft: NexusGenRootTypes['blog'] | null; // blog
    updateBlogsPost: NexusGenRootTypes['blog'] | null; // blog
    updateFAQs: NexusGenRootTypes['faqs'] | null; // faqs
    updateFeedback: NexusGenRootTypes['feedback'] | null; // feedback
    updateService: NexusGenRootTypes['service'] | null; // service
    updateUserVerifiedAcc: NexusGenRootTypes['user'] | null; // user
  }
  Query: { // field return type
    getAllAppointment: Array<NexusGenRootTypes['appointment'] | null> | null; // [appointment]
    getAllAppointmentID: Array<NexusGenRootTypes['appointment'] | null> | null; // [appointment]
    getAllBlogsPost: Array<NexusGenRootTypes['blog'] | null> | null; // [blog]
    getAllEquipment: Array<NexusGenRootTypes['equipment'] | null> | null; // [equipment]
    getAllFAQs: Array<NexusGenRootTypes['faqs'] | null> | null; // [faqs]
    getAllPhysioId: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getAllPhysioPatient: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getAllPhysioStaff: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getAllPrescription: Array<NexusGenRootTypes['prescription'] | null> | null; // [prescription]
    getAllServcie: Array<NexusGenRootTypes['service'] | null> | null; // [service]
    getAllUser: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getBlogSearch: Array<NexusGenRootTypes['blog'] | null> | null; // [blog]
    getSortEquipment: Array<NexusGenRootTypes['equipment'] | null> | null; // [equipment]
  }
  appointment: { // field return type
    appointmentID: string | null; // ID
    date: NexusGenScalars['Date'] | null; // Date
    link: string | null; // String
    patients: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    platform: string | null; // String
    services: Array<NexusGenRootTypes['service'] | null> | null; // [service]
    status: string | null; // String
    time: NexusGenScalars['Time'] | null; // Time
  }
  avatar: { // field return type
    avatar: string | null; // String
    avatarID: string | null; // ID
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  blog: { // field return type
    author: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    blogsID: string | null; // ID
    content: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    draft: boolean | null; // Boolean
    title: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  equipment: { // field return type
    category: string | null; // String
    description: string | null; // String
    equipmentID: string | null; // ID
    expiredDate: NexusGenScalars['DateTime'] | null; // DateTime
    name: string | null; // String
    quantity: number | null; // Int
  }
  faqs: { // field return type
    answer: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    faqs: string | null; // String
    faqsID: string | null; // ID
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  feedback: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    feedback: string | null; // String
    feedbackID: string | null; // ID
    users: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  notification: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    notificationID: string | null; // ID
    status: string | null; // String
    title: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  prescription: { // field return type
    advice: string | null; // String
    amount: number | null; // Int
    createPatientPrescription: NexusGenRootTypes['prescription'] | null; // prescription
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    deletePrescrpition: NexusGenRootTypes['prescription'] | null; // prescription
    dose: number | null; // Int
    patient: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    precription: string | null; // String
    prescriptionID: string | null; // ID
    updatePrescription: NexusGenRootTypes['prescription'] | null; // prescription
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  profile: { // field return type
    avatar: Array<NexusGenRootTypes['avatar'] | null> | null; // [avatar]
    designation: string | null; // String
    emergencyPhone: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    expertise: string | null; // String
    firstname: string | null; // String
    lastname: string | null; // String
    phone: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    profileID: string | null; // ID
  }
  service: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    price: number | null; // Float
    service: string | null; // String
    serviceID: string | null; // ID
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  token: { // field return type
    token: string | null; // String
  }
  user: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    password: string | null; // String
    prescription: Array<NexusGenRootTypes['prescription'] | null> | null; // [prescription]
    profile: Array<NexusGenRootTypes['profile'] | null> | null; // [profile]
    role: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    userID: string | null; // ID
    verified: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createAdminAccount: 'user'
    createAppointment: 'appointment'
    createBlogPost: 'blog'
    createEquipment: 'equipment'
    createFAQs: 'faqs'
    createMyFeedback: 'feedback'
    createPatientAccount: 'user'
    createProfileAvatar: 'avatar'
    createService: 'service'
    deleteAppointment: 'appointment'
    deleteBlogPost: 'blog'
    deleteEquipment: 'equipment'
    deleteFAQs: 'faqs'
    deleteUserAcc: 'user'
    login: 'token'
    resetUserPassword: 'user'
    udpateEquipment: 'equipment'
    updateAppointment: 'appointment'
    updateBlogDraft: 'blog'
    updateBlogsPost: 'blog'
    updateFAQs: 'faqs'
    updateFeedback: 'feedback'
    updateService: 'service'
    updateUserVerifiedAcc: 'user'
  }
  Query: { // field return type name
    getAllAppointment: 'appointment'
    getAllAppointmentID: 'appointment'
    getAllBlogsPost: 'blog'
    getAllEquipment: 'equipment'
    getAllFAQs: 'faqs'
    getAllPhysioId: 'user'
    getAllPhysioPatient: 'user'
    getAllPhysioStaff: 'user'
    getAllPrescription: 'prescription'
    getAllServcie: 'service'
    getAllUser: 'user'
    getBlogSearch: 'blog'
    getSortEquipment: 'equipment'
  }
  appointment: { // field return type name
    appointmentID: 'ID'
    date: 'Date'
    link: 'String'
    patients: 'user'
    platform: 'String'
    services: 'service'
    status: 'String'
    time: 'Time'
  }
  avatar: { // field return type name
    avatar: 'String'
    avatarID: 'ID'
    createdAt: 'DateTime'
    updatedAt: 'DateTime'
  }
  blog: { // field return type name
    author: 'user'
    blogsID: 'ID'
    content: 'String'
    createdAt: 'DateTime'
    draft: 'Boolean'
    title: 'String'
    updatedAt: 'DateTime'
  }
  equipment: { // field return type name
    category: 'String'
    description: 'String'
    equipmentID: 'ID'
    expiredDate: 'DateTime'
    name: 'String'
    quantity: 'Int'
  }
  faqs: { // field return type name
    answer: 'String'
    createdAt: 'DateTime'
    faqs: 'String'
    faqsID: 'ID'
    updatedAt: 'DateTime'
  }
  feedback: { // field return type name
    createdAt: 'DateTime'
    feedback: 'String'
    feedbackID: 'ID'
    users: 'user'
  }
  notification: { // field return type name
    createdAt: 'DateTime'
    notificationID: 'ID'
    status: 'String'
    title: 'String'
    updatedAt: 'DateTime'
  }
  prescription: { // field return type name
    advice: 'String'
    amount: 'Int'
    createPatientPrescription: 'prescription'
    createdAt: 'DateTime'
    deletePrescrpition: 'prescription'
    dose: 'Int'
    patient: 'user'
    precription: 'String'
    prescriptionID: 'ID'
    updatePrescription: 'prescription'
    updatedAt: 'DateTime'
  }
  profile: { // field return type name
    avatar: 'avatar'
    designation: 'String'
    emergencyPhone: 'PhoneNumber'
    expertise: 'String'
    firstname: 'String'
    lastname: 'String'
    phone: 'PhoneNumber'
    profileID: 'ID'
  }
  service: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    price: 'Float'
    service: 'String'
    serviceID: 'ID'
    updatedAt: 'DateTime'
  }
  token: { // field return type name
    token: 'String'
  }
  user: { // field return type name
    createdAt: 'DateTime'
    email: 'EmailAddress'
    password: 'String'
    prescription: 'prescription'
    profile: 'profile'
    role: 'String'
    updatedAt: 'DateTime'
    userID: 'ID'
    verified: 'Boolean'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createAdminAccount: { // args
      role?: NexusGenEnums['roles'] | null; // roles
      user?: NexusGenInputs['userInput'] | null; // userInput
    }
    createAppointment: { // args
      appointment?: NexusGenInputs['appointmentInput'] | null; // appointmentInput
      platform?: NexusGenEnums['platform'] | null; // platform
      serviceID: string; // ID!
      userID: string; // ID!
    }
    createBlogPost: { // args
      blog?: NexusGenInputs['blogInput'] | null; // blogInput
      userID: string; // ID!
    }
    createEquipment: { // args
      equipment?: NexusGenInputs['equipmentInput'] | null; // equipmentInput
      userID: string; // ID!
    }
    createFAQs: { // args
      faqs: NexusGenInputs['faqsInput']; // faqsInput!
      userID: string; // ID!
    }
    createMyFeedback: { // args
      feedback: string; // String!
      userID: string; // ID!
    }
    createPatientAccount: { // args
      user?: NexusGenInputs['userInput'] | null; // userInput
    }
    createProfileAvatar: { // args
      avatar: string; // String!
      profileID: string; // ID!
    }
    createService: { // args
      service?: NexusGenInputs['serviceInput'] | null; // serviceInput
    }
    deleteAppointment: { // args
      appointmentID: string; // ID!
    }
    deleteBlogPost: { // args
      blogsID: string; // ID!
    }
    deleteEquipment: { // args
      equipmentID: string; // ID!
    }
    deleteFAQs: { // args
      faqsID: string; // ID!
    }
    deleteUserAcc: { // args
      userID: string; // ID!
    }
    login: { // args
      email: string; // ID!
      password: string; // String!
    }
    resetUserPassword: { // args
      password: string; // String!
      retype: string; // String!
      userID: string; // ID!
    }
    udpateEquipment: { // args
      equipment?: NexusGenInputs['equipmentInput'] | null; // equipmentInput
      equipmentID: string; // ID!
    }
    updateAppointment: { // args
      appointmentID: string; // ID!
      status?: NexusGenEnums['status'] | null; // status
    }
    updateBlogDraft: { // args
      blogsID: string; // ID!
      draft: boolean; // Boolean!
    }
    updateBlogsPost: { // args
      blog?: NexusGenInputs['blogInput'] | null; // blogInput
      blogsID: string; // ID!
    }
    updateFAQs: { // args
      faqs: NexusGenInputs['faqsInput']; // faqsInput!
      faqsID: string; // ID!
    }
    updateFeedback: { // args
      feedback: string; // String!
      feedbackID: string; // ID!
    }
    updateService: { // args
      service?: NexusGenInputs['serviceInput'] | null; // serviceInput
      serviceID: string; // ID!
    }
    updateUserVerifiedAcc: { // args
      email: NexusGenScalars['EmailAddress']; // EmailAddress!
    }
  }
  Query: {
    getAllAppointmentID: { // args
      appointmentID: string; // ID!
    }
    getAllPhysioId: { // args
      userID: string; // ID!
    }
    getBlogSearch: { // args
      search: string; // String!
    }
    getSortEquipment: { // args
      expireDate?: NexusGenEnums['sortType'] | null; // sortType
      name?: NexusGenEnums['sortType'] | null; // sortType
      quantity?: NexusGenEnums['sortType'] | null; // sortType
    }
  }
  feedback: {
    users: { // args
      feedbackID: string; // ID!
    }
  }
  prescription: {
    createPatientPrescription: { // args
      prescription: NexusGenInputs['prescriptionInput']; // prescriptionInput!
      userID: string; // ID!
    }
    deletePrescrpition: { // args
      prescriptionID: string; // ID!
    }
    updatePrescription: { // args
      prescription?: NexusGenInputs['prescriptionInput'] | null; // prescriptionInput
      prescriptionID: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}