### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

type Mutation {
  createAdminAccount(role: roles, user: userInput): user
  createAppointment(appointment: appointmentInput, platform: platform, serviceID: ID!, userID: ID!): appointment
  createBlogPost(blog: blogInput, userID: ID!): blog
  createEquipment(equipment: equipmentInput, userID: ID!): equipment
  createFAQs(faqs: faqsInput!, userID: ID!): faqs
  createMyFeedback(feedback: String!, userID: ID!): feedback
  createPatientAccount(user: userInput): user
  createProfileAvatar(avatar: String!, profileID: ID!): avatar
  createService(service: serviceInput): service
  deleteAppointment(appointmentID: ID!): appointment
  deleteBlogPost(blogsID: ID!): blog
  deleteEquipment(equipmentID: ID!): equipment
  deleteFAQs(faqsID: ID!): faqs
  deleteUserAcc(userID: ID!): user
  login(email: ID!, password: String!): token
  resetUserPassword(password: String!, retype: String!, userID: ID!): user
  udpateEquipment(equipment: equipmentInput, equipmentID: ID!): equipment
  updateAppointment(appointmentID: ID!, status: status): appointment
  updateBlogDraft(blogsID: ID!, draft: Boolean!): blog
  updateBlogsPost(blog: blogInput, blogsID: ID!): blog
  updateFAQs(faqs: faqsInput!, faqsID: ID!): faqs
  updateFeedback(feedback: String!, feedbackID: ID!): feedback
  updateService(service: serviceInput, serviceID: ID!): service
  updateUserVerifiedAcc(email: EmailAddress!): user
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

type Query {
  getAllAppointment: [appointment]
  getAllAppointmentID(appointmentID: ID!): [appointment]
  getAllBlogsPost: [blog]
  getAllEquipment: [equipment]
  getAllFAQs: [faqs]
  getAllPhysioId(userID: ID!): [user]
  getAllPhysioPatient: [user]
  getAllPhysioStaff: [user]
  getAllPrescription: [prescription]
  getAllServcie: [service]
  getAllUser: [user]
  getBlogSearch(search: String!): [blog]
  getSortEquipment(expireDate: sortType, name: sortType, quantity: sortType): [equipment]
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type appointment {
  appointmentID: ID
  date: Date
  link: String
  patients: [user]
  platform: String
  services: [service]
  status: String
  time: Time
}

input appointmentInput {
  date: Date
  time: Time
}

type avatar {
  avatar: String
  avatarID: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type blog {
  author: [user]
  blogsID: ID
  content: String
  createdAt: DateTime
  draft: Boolean
  title: String
  updatedAt: DateTime
}

input blogInput {
  content: String
  title: String
}

type equipment {
  category: String
  description: String
  equipmentID: ID
  expiredDate: DateTime
  name: String
  quantity: Int
}

input equipmentInput {
  category: String
  description: String
  expireDate: Date
  name: String
  quantity: Int
}

type faqs {
  answer: String
  createdAt: DateTime
  faqs: String
  faqsID: ID
  updatedAt: DateTime
}

input faqsInput {
  answer: String
  faqs: String
}

type feedback {
  createdAt: DateTime
  feedback: String
  feedbackID: ID
  users(feedbackID: ID!): [user]
}

type notification {
  createdAt: DateTime
  notificationID: ID
  status: String
  title: String
  updatedAt: DateTime
}

enum platform {
  f2f
  online
}

type prescription {
  advice: String
  amount: Int
  createPatientPrescription(prescription: prescriptionInput!, userID: ID!): prescription
  createdAt: DateTime
  deletePrescrpition(prescriptionID: ID!): prescription
  dose: Int
  patient: [user]
  precription: String
  prescriptionID: ID
  updatePrescription(prescription: prescriptionInput, prescriptionID: ID!): prescription
  updatedAt: DateTime
}

input prescriptionInput {
  advice: String
  amount: Int
  dose: Int
  prescription: String
}

type profile {
  avatar: [avatar]
  designation: String
  emergencyPhone: PhoneNumber
  expertise: String
  firstname: String
  lastname: String
  phone: PhoneNumber
  profileID: ID
}

enum roles {
  admin
  patient
  staff
}

type service {
  createdAt: DateTime
  description: String
  price: Float
  service: String
  serviceID: ID
  updatedAt: DateTime
}

input serviceInput {
  description: String
  price: Float
  service: String
}

enum sortType {
  asc
  desc
}

enum status {
  done
  finished
  upcoming
}

type token {
  token: String
}

type user {
  createdAt: DateTime
  email: EmailAddress
  password: String
  prescription: [prescription]
  profile: [profile]
  role: String
  updatedAt: DateTime
  userID: ID
  verified: Boolean
}

input userInput {
  designation: String
  email: EmailAddress
  emergencyPhone: PhoneNumber
  expertise: String
  firstname: String
  lastname: String
  password: String
  phone: PhoneNumber
}