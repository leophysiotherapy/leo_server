### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

type EquipmentExpiration {
  count: Int
}

type Mutation {
  cancelAdminAppointment(appointmentID: ID!, reason: String!): appointment
  canceledAppointment(appointmentID: ID!): appointment
  createAdminAccount(user: userInput): user
  createAppointment(appointment: appointmentInput, end: String!, platform: platform, userID: ID!): appointment
  createBlogPost(blog: blogInput, userID: ID!): blog
  createEquipment(equipment: equipmentInput, inventory: inventory, userID: ID!): equipment
  createFAQs(faqs: faqsInput!, userID: ID!): faqs
  createFeedback(feedback: String!, rating: Int!, userID: ID!): feedback
  createMyFeedback(appointmentID: ID!, feedback: String!, rating: Int!, userID: ID!): feedback
  createOTP(email: EmailAddress!): OTP
  createOldPatient(date: String!, diagnosis: String!, platform: platform, prescription: String!, time: String, user: userInput): user
  createPatientAccount(user: userInput): user
  createPatientDiagnosis(diagnosis: ID!, userID: ID!): diagnosis
  createPatientPrescription(prescription: prescriptionInput!, userID: ID!): prescription
  createProfileAvatar(avatar: String!, profileID: ID!): avatar
  createSMSNotification(phoneNumber: PhoneNumber!): Boolean
  createServices(descriptions: String!, file: Upload, services: String!): services
  createStaffAccount(file: Upload, user: userInput): user
  deleteAppointment(appointmentID: ID!): appointment
  deleteBlogPost(blogsID: ID!): blog
  deleteEquipment(equipmentID: ID!): equipment
  deleteFAQs(faqsID: ID!): faqs
  deleteMyFeedback(feedbackID: ID!): feedback
  deletePatientDiagnosis(diagnosisID: ID!): diagnosis
  deletePrescrpition(prescriptionID: ID!): prescription
  deleteServices(servicesID: ID!): services
  deleteUserAcc(userID: ID!): user
  findEmailAddress(email: EmailAddress!): user
  login(email: ID!, password: String!): token
  resetUserPassword(email: EmailAddress!, password: String!, retype: String!): user
  updateAppointment(appointmentID: ID!, status: status): appointment
  updateAppointmentSession(appointment: appointmentInput, appointmentID: ID!, link: String, platform: platform, status: status): appointment
  updateBlogsPost(blog: blogInput, blogsID: ID!): blog
  updateContactNumber(phone: PhoneNumber!, userID: ID!): profile
  updateDateAppointment(appointmentID: ID!, date: String!, reason: String!, time: String!): appointment
  updateEquipment(equipment: equipmentInput, equipmentID: ID!): equipment
  updateFAQs(faqs: faqsInput!, faqsID: ID!): faqs
  updateOlPatient(date: String!, diagnosis: String!, platform: platform, prescription: String!, time: String, user: userInput, userID: ID!): user
  updatePassword(current: String!, newpass: String!, userID: ID!): user
  updatePatientAccount(firstname: ID!, lastname: String!, phone: PhoneNumber!, userID: ID!): user
  updatePatientDiagnosis(diagnosis: String!, diagnosisID: ID!): diagnosis
  updatePrescription(prescription: prescriptionInput, prescriptionID: ID!): prescription
  updateServices(descriptions: String!, file: Upload, services: String!, servicesID: ID!): services
  updateStaffAccount(file: Upload, user: userInput, userID: ID!): user
  updateUserVerifiedAcc(email: EmailAddress!): user
  verifyOTP(otp: String!): OTP
}

type OTP {
  createdAt: DateTime
  expiredAt: DateTime
  otp: String
  otpID: ID
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

type Query {
  getAllAppointment: [appointment]
  getAllAppointmentID(appointmentID: ID!): [appointment]
  getAllAppointmentToday: [appointment]
  getAllBlogsPost: [blog]
  getAllDiagnosis: [diagnosis]
  getAllEquipment(inventories: inventory): [equipment]
  getAllFAQs: [faqs]
  getAllFeedback: [feedback]
  getAllFeedbackByUserId(userID: ID!): [feedback]
  getAllPatientAppointment(platform: platform, status: status, userID: ID!): [appointment]
  getAllPhysioId(userID: ID!): [user]
  getAllPhysioPatient: [user]
  getAllPhysioUserBySearch(role: roles, search: String!): [user]
  getAllPrescription: [prescription]
  getAllServices: [services]
  getAllUser: [user]
  getAppointmentByDateTime(date: String!, platform: platform): [appointment]
  getAppointmentByPlatform(platform: platform): [appointment]
  getAppointmentByplatform(platform: platform): [appointment]
  getBlogSearch(search: String!): [blog]
  getBlogsById(blogsID: ID!): [blog]
  getDiagnosisID(diagnosisID: ID!): [diagnosis]
  getFeedbackById(feedbackID: ID!): [feedback]
  getFindFAQsQuestion(search: String!): [faqs]
  getFindPrescription(search: String!): [prescription]
  getInventoryBySearch(search: String!): [equipment]
  getInventoryExpiration: Int
  getPhysioUserByRole(limit: Int!, role: roles, take: Int!): [user]
  getPrescriptionsById(prescriptionID: ID!): [prescription]
  getReportsByPlatform(dateFilter: String!, platform: platform!): [appointmentChart]
  getSearchuserByRole(role: roles, search: String!): [user]
  getServicesBySearch(search: String!): [services]
}

type Subscription {
  FAQsSubscriptions: faqs
  InventorySubscriptions(inventory: inventory): equipment
  UserSubscriptions(role: roles): user
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type appointment {
  amount: Int
  appointmentID: ID
  createdAt: DateTime
  date: Date
  link: String
  patients: [user]
  platform: String
  services: String
  status: String
  time: String
}

type appointmentChart {
  _all: Int
  createdAt: Date
}

input appointmentInput {
  amount: Int
  date: Date
  services: String
  time: String
}

type avatar {
  avatar: String
  avatarID: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type blog {
  author: [user]
  blogsID: ID
  content: String
  createdAt: DateTime
  expertise: String
  image: String
  title: String
  updatedAt: DateTime
}

input blogInput {
  content: String
  expertise: String
  file: Upload
  title: String
}

type diagnosis {
  createdAt: DateTime
  diagnosis: String
  diagnosisID: ID
  patient: [user]
}

type equipment {
  description: String
  equipmentID: ID
  expireDate: DateTime
  name: String
  quantity: Int
}

input equipmentInput {
  description: String
  expireDate: Date
  name: String
  quantity: Int
}

type faqs {
  answer: String
  createdAt: DateTime
  faqs: String
  faqsID: ID
  updatedAt: DateTime
}

input faqsInput {
  answer: String
  faqs: String
}

type feedback {
  appointment: [appointment]
  creatdAt: DateTime
  createdAt: DateTime
  feedback: String
  feedbackID: ID
  rating: Int
  users: [user]
}

enum inventory {
  equipment
  supplies
}

enum platform {
  f2f
  online
}

type prescription {
  createdAt: DateTime
  patient: [user]
  prescription: String
  prescriptionID: ID
  updatedAt: DateTime
}

input prescriptionInput {
  prescription: String
}

type profile {
  avatar: [avatar]
  designation: String
  emergencyPhone: PhoneNumber
  expertise: String
  firstname: String
  fullname: String
  lastname: String
  phone: PhoneNumber
  profileID: ID
}

enum roles {
  admin
  patient
  staff
}

type services {
  descriptions: String
  image: String
  price: Int
  services: String
  servicesID: ID
}

enum status {
  canceled
  done
  finished
  upcoming
}

type token {
  token: String
}

type user {
  appointment: [appointment]
  createdAt: DateTime
  diagnosis: [diagnosis]
  email: EmailAddress
  password: String
  prescription: [prescription]
  profile: [profile]
  role: String
  updatedAt: DateTime
  userID: ID
  verified: Boolean
}

input userInput {
  designation: String
  email: EmailAddress
  emergencyPhone: PhoneNumber
  expertise: String
  firstname: String
  lastname: String
  password: String
  phone: String
}